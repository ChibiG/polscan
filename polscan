#!/bin/bash

# Polscan: a Debian policy scanner
# Copyright (C) 2015  Lars Windolf <lars.windolf@gmx.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

BASE=$(dirname $0)
BASE=$(readlink -e $BASE)
if [ "$BASE" == "/usr/bin" ]; then
	CONF_DIR=/etc/polscan/
	LIB_DIR=/usr/lib/polscan/
else
	CONF_DIR=${BASE}/etc/
	LIB_DIR=${BASE}/lib
fi

# Command line parsing, setup environment
source $LIB_DIR/polscan-common.inc

# 0. Prepare output dir
if [ ! -d $RESULT_DIR ]; then
	mkdir -vp "$RESULT_DIR"
fi

# 1. If none given determine host list automatically
if [ "$HOST_LIST" == "" ]; then 
	echo "Fetching host list (provider '$HOST_LIST_PROVIDER')..."
	HLP="$LIB_DIR/host-list-providers/$HOST_LIST_PROVIDER"
	if [ ! -f $HLP ]; then
		echo "ERROR: Could not find host list provider $HLP"
		exit 1
	fi
	HOST_LIST=$($HLP)
	if [ $? -ne 0 ]; then
		echo "ERROR: Could not determine '$HOST_LIST_PROVIDER' host list!"
		exit 1
	fi
fi
echo "Host list:" $HOST_LIST

REMOTE_SCANNER_LIST=$(grep -v "^ *#" "$REMOTE_SCANNERS_FILE")
if [ "$REMOTE_SCANNER_LIST" != "" ]; then

	# 2. Build remote scanner script
	RSS=/tmp/polscan-remote-scanner.$$
	cat $LIB_DIR/scanner-header.inc >$RSS || exit 1
	cat $LIB_DIR/scanner-functions.inc >>$RSS || exit 1
	for scanner in $REMOTE_SCANNER_LIST; do
		file=$LIB_DIR/scanners/$scanner
		if [ ! -f $file ]; then
			echo "WARNING: Unknown policy '$scanner'!"
		else
			group=`get_policy_group "$file"`
			name=`get_policy_name "$file"`
			echo "policy_name='$name'; policy_group='$group'" >>$RSS
			cat "$file" >>$RSS
		fi
	done

	# 3. Run remote scanner script

	if [ "$SCAN_LOCALHOST" == 1 ]; then
		echo "Scanning localhost..."
		# FIXME: sudo
		/bin/bash $RSS > ${RESULT_DIR}/localhost
	fi

	echo "Running remote scans..."
	i=1
	host_count=$(echo $HOST_LIST | wc -w)
	for remote in $HOST_LIST; do
		if ! echo $remote | grep -q @; then
			# Default user if none given from host list
			remote=$SSH_USER@$remote
		fi

		current_host=${remote/*@/}

		if ! echo $remote | grep -q "root@"; then
			sudo=$SUDO_CMD
			echo " -> $remote (sudo) [$i/$host_count]"
		else
			echo " -> $remote"
		fi

		/bin/cat $RSS | $SSH_CMD $remote $sudo "/bin/bash < <(/bin/cat -)" \
			>${RESULT_DIR}/$current_host \
			2>${RESULT_DIR}/${current_host}.err

		if [ $? -ne 0 ]; then
			# Scanner should never set return code, if we get one
			# we have a scripting/connectivity issue that we want
			# to track under name "polscan"
			(
				errors=$(grep -v 'Warning: Permanently added.*to the list of known hosts.' ${RESULT_DIR}/${current_host}.err 2>/dev/null)
				echo "Polscan FAILED |||Polscan remote scan||| $errors"
			) >>${RESULT_DIR}/$current_host
			rm ${RESULT_DIR}/${current_host}.err
		fi

		i=$(( $i + 1 ))
	done
fi
rm $RSS

# 4. Run standalone scanner scripts
if [ -f $STANDALONE_SCANNERS_FILE ]; then
	STANDALONE_SCANNER_LIST=$(grep -v "^ *#" "$STANDALONE_SCANNERS_FILE")
	if [ "$STANDALONE_SCANNER_LIST" != "" ]; then
		echo "Running standalone scanners..."
		for scanner in $STANDALONE_SCANNER_LIST; do
			echo " -> Running '$scanner'..."
			scanner_file=$LIB_DIR/standalone/$scanner
			group=`get_policy_group "$scanner_file"`
			policy=`get_policy_name "$scanner_file"`
			$scanner_file |\
			while read host severity data; do
				echo "$group $severity |||$policy||| $data" >>$RESULT_DIR/$host
			done
		done
	fi
fi

$BASE/polscan_html

echo "Done."
