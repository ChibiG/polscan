#!/bin/bash

# Polscan: a Debian policy scanner

# Copyright (C) 2015-2016  Lars Windolf <lars.windolf@gmx.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

BASE=$(dirname "$0")
BASE=$(readlink -e "$BASE")
if [ "$BASE" == "/usr/bin" ]; then
	CONF_DIR=/etc/polscan/
	LIB_DIR=/usr/lib/polscan/
else
	CONF_DIR="${BASE}/etc/"
	LIB_DIR="${BASE}/lib"
fi

NON_INTERACTIVE=$(/usr/bin/tty -s; echo $?)

# Command line parsing, setup environment
source "$LIB_DIR/polscan-common.inc"

###############################################################################
# Prints progress bar when in interactive shell, otherwise just a single
# line with currently processed host
#
# $1 	current host
###############################################################################
declare -A progress
OK_COLOR=$(/usr/bin/tput setab 2; /usr/bin/tput setaf 0)
FAILED_COLOR=$(/usr/bin/tput setab 1; /usr/bin/tput setaf 0)
WARNING_COLOR=$(/usr/bin/tput setab 3; /usr/bin/tput setaf 0)
RESET_COLOR=$(/usr/bin/tput sgr0)

print_progress() {
	host=$1
	progress[host_count]=$(( ${progress[host_count]-0} + 1 ))

	if [[ ${progress[hosts_total]} = "" ]]; then
		progress[hosts_total]=$(echo $HOST_LIST | wc -w)
		printf "\n\n\n\n"
	fi

	if [[ $NON_INTERACTIVE -eq 1 ]]; then
		printf " -> %s [%d/%d]\n" "$remote" "${progress[host_count]}" "${progress[hosts_total]}"
	else
		# Get result statistics
		if [ -f "$RESULT_DIR/$host" ]; then
			progress[result_count]=$((${progress[result_count]-0} + $(grep -c ' |||' "$RESULT_DIR/$host" 2>/dev/null)))
			progress[failed_count]=$((${progress[failed_count]-0} + $(grep -c ' FAILED ' "$RESULT_DIR/$host" 2>/dev/null)))
			progress[warning_count]=$((${progress[warning_count]-0} + $(grep -c ' WARNING ' "$RESULT_DIR/$host" 2>/dev/null)))
			progress[ok_count]=$((${progress[ok_count]-0} + $(grep -c ' OK ' "$RESULT_DIR/$host" 2>/dev/null)))
		fi

		# FIXME: Colors only on color capable terminals
		printf "sc\ncuu 4\nel1\nel\n" | /usr/bin/tput -S
		echo "---------------------------------------------------------"
		/usr/bin/tput el
		printf "Scanning %s (%d/%d)\n" "$remote" "${progress[host_count]}" "${progress[hosts_total]}"
		/usr/bin/tput el
		printf "Results: Overall %d (%s %d %s / %s %d %s / %s %d %s)\n" "${progress[result_count]}" "$FAILED_COLOR" "${progress[failed_count]}" "$RESET_COLOR" "$WARNING_COLOR" "${progress[warning_count]}" "$RESET_COLOR" "$OK_COLOR" "${progress[ok_count]}" "$RESET_COLOR"
		echo "---------------------------------------------------------"
		/usr/bin/tput rc
	fi
}

# 0. Prepare output dir
if [ ! -d "$RESULT_DIR" ]; then
	mkdir -vp "$RESULT_DIR" || exit 1
fi

# 1. If none given determine host list automatically
if [ "$HOST_LIST" == "" ]; then 
	for h in $HOST_LIST_PROVIDER; do
		echo "Fetching host list (provider '$h')..."
		HLP="$LIB_DIR/host-list-providers/$h"
		if [ ! -f "$HLP" ]; then
			echo "ERROR: Could not find host list provider $HLP"
			exit 1
		fi
		HOST_LIST="${HOST_LIST}
$($HLP)"
		if [ $? -ne 0 ]; then
			echo "ERROR: Could not determine '$h' host list!"
			exit 1
		fi
	done
fi

if [ "$HOST_LIST" == "" ]; then
	echo "ERROR: Could not find any hosts! Aborting."
	exit 1
else
	echo "Host list:" $HOST_LIST
fi

load_host_groups

REMOTE_SCANNER_LIST=$(get_scanners remote)
if [ "$REMOTE_SCANNER_LIST" != "" ]; then

	# 2. Build remote scanner script
	RSS=/tmp/polscan-remote-scanner.$$
	cat "$LIB_DIR/scanner-header.inc" >$RSS || exit 1
	cat "$LIB_DIR/scanner-functions.inc" >>$RSS || exit 1
	for scanner in $REMOTE_SCANNER_LIST; do
		file=$LIB_DIR/scanners/$scanner
		if [ ! -f "$file" ]; then
			echo "WARNING: Unknown policy '$scanner'!"
		else
			group=$(get_policy_info "$file" group)
			name=$(get_policy_info "$file" name)
			echo "policy_name='$name'; policy_group='$group'" >>$RSS
			cat "$file" >>$RSS
		fi
	done

	echo "Running remote scans..."
	for remote in $HOST_LIST; do
		current_host=${remote/*@/}

		if ! echo "$remote" | grep -q @; then
			# Default user if none given from host list and SSH_USER is set
			if [ "$SSH_USER" != "" ]; then
				remote=$SSH_USER@$remote
			fi
		fi

		if ! echo "$remote" | grep -q "root@"; then
			sudo=$SUDO_CMD
		fi

		$SSH_CMD "$remote" "$sudo" "/bin/bash < <(/bin/cat -)" \
			<"$RSS" \
			>"${RESULT_DIR}/$current_host" \
			2>"${RESULT_DIR}/${current_host}.err"

		if [ $? -ne 0 ]; then
			# Scanner should never set return code, if we get one
			# we have a scripting/connectivity issue that we want
			# to track under name "polscan"
			(
				errors=$(grep -v "$REMOTE_STDERR_WHITELIST" "${RESULT_DIR}/${current_host}.err" 2>/dev/null)
				printf "\nPolscan FAILED |||Polscan remote scan||| %s\n" "$errors"
			) >>"${RESULT_DIR}/$current_host"
		fi
		rm "${RESULT_DIR}/${current_host}.err"
		print_progress "$current_host"
	done
fi
rm $RSS

# 4. Run standalone scanner scripts
STANDALONE_SCANNER_LIST=$(get_scanners standalone)
if [ "$STANDALONE_SCANNER_LIST" != "" ]; then
	echo "Running standalone scanners..."
	for scanner in $STANDALONE_SCANNER_LIST; do
		echo " -> Running '$scanner'..."
		scanner_file=$LIB_DIR/standalone/$scanner
		group=$(get_policy_info "$scanner_file" group)
		policy=$(get_policy_info "$scanner_file" name)
		$scanner_file |\
		while read host severity data; do
			echo "$group $severity |||$policy||| $data" >>"$RESULT_DIR/$host"
		done
	done
fi

$BASE/polscan_html

echo "Done."
