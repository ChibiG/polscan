#!/bin/bash

BASE=$(dirname $0)
BASE=$(readlink -e $BASE)
if [ "$BASE" == "/usr/bin" ]; then
	CONF_DIR=/etc/polscan/
	LIB_DIR=/usr/lib/polscan/
else
	CONF_DIR=${BASE}/etc/
	LIB_DIR=${BASE}/lib
fi

DATE=$1		# Allow passing date

source $LIB_DIR/polscan-common.inc

# Prepare output dir
if [ ! -d $RESULT_DIR ]; then
	echo "ERROR: No results found in '$RESULT_DIR'"
	exit 1
fi
if [ ! -d "$JSON_DIR" ]; then
	mkdir -p "$JSON_DIR" || exit 1
fi
cd $RESULT_DIR || exit 1

###############################################################################
# Helper method to write JSON, solves the issue of forbidden final comma in
# array lists...
#
# $1	file name
# $2	root key
# $3	extra data for root key
###############################################################################
write_json() {
	name=$1
	root=$2

	echo "Writing $name.json..."
	(
		echo '{"date": "'$DATE'", "'$root'":['
		cat | sed 's/[^[:print:]]//g'
		echo -n "]}"
	) | sed 's/,\]/]/g' >${JSON_DIR}/${name}.json
}

# Do regroup results by group and policy
declare -A policies
declare -A pgroups
declare -A pall

groups=$(
	egrep -h "^[a-zA-Z0-9][[a-zA-Z0-9]* (OK|WARNING|FAILED) " ./* |\
	awk '{print $1}' | sort -u
)
echo "Found results for:" $groups

# Global results
tmp=
while read host group severity details; do
	policy=${details/#|||/}
	policy=${policy/|||*/}
	message=${details/*|||/}
	case $severity in
		OK|WARNING|FAILED)
			tmp=$tmp'{"host": "'$host'", "group": "'$group'", "severity": "'$severity'", "policy": "'$policy'", "message": "'${message//\"/\'}'"},'
			;;
	esac
	case $severity in
		WARNING)
			pall[warn]=$(( ${pall[warn]} + 1))
			pgroups[warn_$group]=$(( ${pgroups[warn_$group]} + 1 ))
			policies[warn_$policy]=$(( ${policies[warn_$policy]} + 1 ))
			;;
		FAILED)
			pall[fail]=$(( ${pall[fail]} + 1))
			pgroups[fail_$group]=$(( ${pgroups[fail_$group]} + 1 ))
			policies[fail_$policy]=$(( ${policies[fail_$policy]} + 1 ))
			;;
	esac
done < <(
	ls | xargs -I {} -n1 sed '/^[^ ][^ ]* OK /d; s/^/{} /;' {}
)
echo -n "$tmp" | write_json all results

# Per group results
for g in $groups; do
	(
		ls | xargs -n1 grep -H "^$g " |\
		sed 's/:/ /' |\
		while read host group severity details; do
			policy=${details/#|||/}
			policy=${policy/|||*/}
			message=${details/*|||/}
			echo -n '{"host": "'$host'", "severity": "'$severity'", "policy": "'$policy'", "message": "'${message//\"/\'}'"},'
		done
	) | write_json $g 'group": "'$g'", "WARNING": '${pgroups[warn_$g]-0}', "FAILED": '${pgroups[fail_$g]-0}', "results'
done

# Statistics
(
	for g in $groups; do
		echo "- $g" >&2
		count=$(ls | xargs -n1 grep "^$g " | wc -l)
		echo -n '{"group": "'$g'", "WARNING": '${pgroups[warn_$g]-0}', "FAILED": '${pgroups[fail_$g]-0}', "count": '${count-0}'},'
	done
	for s in $(
		cat ${REMOTE_SCANNERS_FILE} | sed "s/^/scanners\//"
		cat ${STANDALONE_SCANNERS_FILE} 2>/dev/null | sed "s/^/standalone\//"
	); do
		echo "- $s" >&2
		group=`get_policy_group "$LIB_DIR/$s"`
		policy=`get_policy_name "$LIB_DIR/$s"`
		description=`get_policy_description "$LIB_DIR/$s"`
		echo -n '{"policy": "'$policy'", "parent": "'$group'", "description": "'$description'", "WARNING": '${policies[warn_$policy]-0}', "FAILED": '${policies[fail_$policy]-0}'},'
	done
) | write_json overview 'WARNING": '${pall[warn]-0}', "FAILED": '${pall[fail]-0}', "overview'

if [ $LATEST == 1 ]; then
	# Link latest results
	rm "$RESULT_BASE_DIR/latest"
	cd $RESULT_BASE_DIR && ln -s "json/$DATE" latest
fi

echo "Done."
